import {NO_ERRORS_SCHEMA} from '@angular/core';
import {
  ComponentFixture, ComponentFixtureAutoDetect, TestBed, fakeAsync,
  tick
} from '@angular/core/testing';
import {By} from '@angular/platform-browser';
import {DebugElement} from '@angular/core';
import {LoginComponent} from './login.component';
import {ReactiveFormsModule, FormBuilder, FormsModule} from '@angular/forms';
import {AppMaterialModule} from './app-material.module';
import {AppRoutingModule, appRoutes, routing} from './app-routing.module';
import {ApplicationMainComponent} from './application-main.component';
import {LegalEntitiesTableComponent} from './legal-entities-table.component';
import {EntityAddressFormComponent} from './entity-address-form.component';
import {NgxDatatableModule} from '@swimlane/ngx-datatable';
import {Router} from '@angular/router';
import {AuthenticationService} from './service/authentication-service';
import {User} from './model/user';
import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';
import {HttpClient} from '@angular/common/http';


describe('LoginComponent', () => {

  const mockRouter = {
    navigate: jasmine.createSpy('navigate')
  }


  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;
  let authenticationService: AuthenticationService;
  let httpMock: HttpClient;

  beforeEach(async () => {

    TestBed.configureTestingModule({
      declarations: [LoginComponent, ApplicationMainComponent, LegalEntitiesTableComponent, EntityAddressFormComponent],
      imports: [AppMaterialModule, ReactiveFormsModule, FormsModule, NgxDatatableModule, AppRoutingModule, HttpClientTestingModule],
      providers: [FormBuilder, AuthenticationService, {provide: Router, useValue: mockRouter}],
      schemas: [NO_ERRORS_SCHEMA]
    }).compileComponents().then(() => {
        fixture = TestBed.createComponent(LoginComponent);
        component = fixture.componentInstance;
        httpMock = TestBed.get(HttpTestingController);
        authenticationService = new AuthenticationService(httpMock);
        spyOn(authenticationService, 'logout');
        component.ngOnInit();
      }
    );
  });

  it('true is true', () => expect(true).toBe(true));

  it('form invalid when empty', () => {
    expect(component.loginForm.valid).toBeFalsy();
  });

  it('userName field validity', () => {
    expect(component.loginForm.controls['userName'].valid).toBeFalsy();
  });

  it('password field validity', () => {
    expect(component.loginForm.controls['password'].valid).toBeFalsy();
  });

  it('userName field validator', () => {
    const errors = component.loginForm.controls['userName'].errors;
    expect(errors['required']).toBeTruthy();
  });

  it('password field validator', () => {
    const errors = component.loginForm.controls['password'].errors;
    expect(errors['required']).toBeTruthy();
  });

  it('submitting the form sets the model', () => {

    component.loginForm.get('userName').setValue('test');
    component.loginForm.get('password').setValue('123456789');
    expect(component.loginForm.valid).toBeTruthy();

    component.formToModel();
    expect(component.getUsername()).toBe('test');
  });

  it('valid credentials return user data', () => {

    component.loginForm.get('userName').setValue('test');
    component.loginForm.get('password').setValue('123456789');
    const user: User = new User();
    user.username = 'username';
    user.firstName = 'firstName';
    user.lastName = 'lastName';
    user.email = 'email';
    spyOn(component, 'checkCredentials').and.callFake(() =>   component.user = user ) ;

    component.login();

    expect( component.getUserFirstName()).toBe('firstName');
    expect( component.getUserLastName()).toBe('lastName');
    expect( component.getEmail()).toBe('email');
  });

  it('invalid credentials cause invalidLogin error.', () => {
    component.loginForm.get('userName').setValue('test');
    component.loginForm.get('password').setValue('123456789');

    spyOn(component, 'checkCredentials').and.callFake(() =>   {
      component.loginForm.get('userName').setErrors({'invalidLogin': true});
      component.loginForm.get('password').setErrors({'invalidLogin': true});
    }) ;

    component.login();
    expect( component.loginForm.get('userName').getError('invalidLogin')).toBe(true);
    expect( component.loginForm.get('password').getError('invalidLogin')).toBe(true);
  });

});



